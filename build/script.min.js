class AudioManager{constructor(options){this.audioCtx=new(window.AudioContext||window.webkitAudioContext)();this.oscillatorsTypes=['sine'];this.oscillatorsOptions=[["osc1","sine",1],["osc2","sine",1]]
this.oscillators={}
this.midNotes=[220,247,262,294,330,349,392,440]
this.highNotes=[493,523,587,659,698,783,880]
this.lowNotes=[110,123,130,146,164,174,195]
this.blackNotes=[78,92,104,116,139,156,185,208,233,277,311,370,415,466,554,622,740]
this.allNotes=this.blackNotes;this.noteOffset=1;this.timeoutDuration=150}
initAudio(){for(var i=0;i<this.oscillatorsOptions.length;i++){this.initOscillators(this.oscillatorsOptions[i])}}
initOscillators(options){const osc=this.audioCtx.createOscillator();osc.volume=this.audioCtx.createGain();osc.volume.connect(this.audioCtx.destination);osc.volume.gain.value=1;osc.type=options[1];osc.frequency.value=options[2];osc.connect(osc.volume);osc.start();const name=options[0];const reverb=new SimpleReverb(this.audioCtx,{seconds:4,decay:0,reverse:0})
osc.connect(reverb.input);reverb.connect(this.audioCtx.destination);osc.timeout=null;this.oscillators[name]=osc}
getAverageNote(){let sum=0;for(let i=0;i<this.allNotes.length;i++){sum+=parseInt(this.allNotes[i],10)}
return sum/this.allNotes.length}
playNote(osc,freq=null,volume=1){if(!freq){freq=this.getRandomFrequence()}
osc.frequency.setValueAtTime(freq,this.audioCtx.currentTime);osc.volume.gain.value=volume;if(osc.timeout){clearTimeout(osc.timeout)}
osc.timeout=setTimeout(()=>{osc.frequency.setValueAtTime(0,this.audioCtx.currentTime)},this.timeoutDuration)}
playNotes(){this.possibleFrequences=this.allNotes.slice(0);let index=0;for(let name in this.oscillators){setTimeout(()=>{let osc=this.oscillators[name];const freq=this.getRandomFrequence();let freqIndex=this.possibleFrequences.indexOf(freq);if(freqIndex>-1){this.possibleFrequences.splice(freqIndex,1)}
this.playNote(osc,freq,volume)},index*this.timeoutDuration);index++}}
getRandomFrequence(){const freq=this.allNotes[Math.floor(Math.random()*this.allNotes.length)];return freq}}var colors=new Array([0,0,200],[200,0,0],[200,200,200],[200,200,200]);var step=0;var colorIndices=[0,1,2,3];var gradientHolder=document.querySelector('#gradient');var gradientSpeed=0.002;function updateGradient(){var c0_0=colors[colorIndices[0]];var c0_1=colors[colorIndices[1]];var c1_0=colors[colorIndices[2]];var c1_1=colors[colorIndices[3]];var istep=1-step;var r1=Math.round(istep*c0_0[0]+step*c0_1[0]);var g1=Math.round(istep*c0_0[1]+step*c0_1[1]);var b1=Math.round(istep*c0_0[2]+step*c0_1[2]);var color1="rgb("+r1+","+g1+","+b1+")";var r2=Math.round(istep*c1_0[0]+step*c1_1[0]);var g2=Math.round(istep*c1_0[1]+step*c1_1[1]);var b2=Math.round(istep*c1_0[2]+step*c1_1[2]);var color2="rgb("+r2+","+g2+","+b2+")";var gradient="gradient(linear, left top, right top, from("+color1+"), to("+color2+"))";var webkitGradient="-webkit-gradient(linear, left top, right top, from("+color1+"), to("+color2+"))";var mozGradient="-webkit-gradient(linear, left top, right top, from("+color1+"), to("+color2+"))";gradientHolder.style.background=mozGradient;gradientHolder.style.background=webkitGradient;gradientHolder.style.background=gradient;step+=gradientSpeed;if(step>=1){step%=1;colorIndices[0]=colorIndices[1];colorIndices[2]=colorIndices[3];colorIndices[1]=(colorIndices[1]+Math.floor(1+Math.random()*(colors.length-1)))%colors.length;colorIndices[3]=(colorIndices[3]+Math.floor(1+Math.random()*(colors.length-1)))%colors.length}}class Monolith{constructor(options={}){this.class=this;this.geometry=options.geometry||new THREE.CubeGeometry(10,20,1,3,6,1);this.texture=options.texture||new THREE.TextureLoader().load('build/texture.jpg');this.material=options.material||new THREE.ShaderMaterial({uniforms:{tMatCap:{type:'t',value:this.texture},},vertexShader:document.getElementById('sem-vs').textContent,fragmentShader:document.getElementById('sem-fs').textContent});this.material.uniforms.tMatCap.value.wrapS=this.material.uniforms.tMatCap.value.wrapT=THREE.ClampToEdgeWrapping;this.mesh=new THREE.Mesh(this.geometry,this.material);this.position=options.position||{x:0,y:0,z:0};this.mesh.position.set(this.position.x,this.position.y,this.position.z)
this.hoverable=!0;this.rotation={x:0,y:0,z:0}
this.parent=new THREE.Object3D();this.parent.position.set(0,0,0);this.rotationSpeed=1/this.position.z*1;this.parent.rotation.set(0,-options.angle,0);this.distance=options.distance||1;this.parent.add(this.mesh);this.osc=options.osc||audioManager.oscillators[0];this.note=options.note||audioManager.allNotes[0];let minNote=Math.min(...audioManager.allNotes);let maxNote=Math.max(...audioManager.allNotes);this.volume=1-(this.note-minNote)/(maxNote-minNote);this.isAnimating=!1;return this}
onClick(){}
playAnimation(){this.isAnimating=!0;TweenMax.to(this.mesh.rotation,2,{z:this.mesh.rotation.z-Math.PI,ease:Elastic.easeOut.config(1),onComplete:()=>{setTimeout(()=>{this.isAnimating=!1},100)}})}
update(elapsed,meshesRotation){this.parent.rotation.y+=this.rotationSpeed*meshesRotation;let playBoth=Math.sin(this.parent.rotation.y)>0.98||Math.sin(this.parent.rotation.y)<-0.98;let playOne=Math.sin(this.parent.rotation.y)>0.98;if(playOne){audioManager.playNote(this.osc,this.note,this.volume);if(!this.isAnimating){this.playAnimation()}}}}var renderer,canvas,camera,scene,rayCaster,mouseClickPosition;var monoliths=[],monolithMeshes,clock;var rotationX=rotationY=0;var mouseOver=!1;const lerp=.03;const lerp2=.1;let screenWidth,screenHeight;let audioManager=null;let meshesRotation=0;let meshesRotationTarget=0;let useOrbitControls=!0;let zoomLevel=100;let zoomMax=500;let mouse={x:0.9,y:-0.05};let averageNote=null;let isClicking=!1;let cameraTargetPosition={x:-1000,y:63,z:1100};let mouseOffset={x:0,y:0};let originalMousePosition={x:0,y:0};let mainMonolith=null;let meshesRotationTargetLocked=!1;function init(){screenWidth=window.innerWidth;screenHeight=window.innerHeight;renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0,preserveDrawingBuffer:!0});renderer.setSize(screenWidth,screenHeight);canvas=renderer.domElement;camera=new THREE.PerspectiveCamera(18,window.innerWidth/window.innerHeight,10,100000);scene=new THREE.Scene();rayCaster=new THREE.Raycaster();mouseClickPosition=new THREE.Vector2();mouseOverPosition=new THREE.Vector2();clock=new THREE.Clock();var container=document.getElementById('container');container.appendChild(canvas);scene.add(camera);camera.position.x=-707;camera.position.y=-322;camera.position.z=909;monolithMeshes=new THREE.Object3D();var monolithNumber=20;var radius=50;var angle=0.2;var step=(2*Math.PI)/monolithNumber;averageNote=audioManager.getAverageNote();for(let i=0;i<monolithNumber;i++){let options={};let oscIndex=i%2===0?0:1;options.osc=audioManager.oscillators[Object.keys(audioManager.oscillators)[oscIndex]];options.note=audioManager.getRandomFrequence();let distance=(radius+Math.random()*500);options.distance=distance;options.angle=angle;options.position={x:0,y:(options.note-averageNote)/2,z:Math.max(80,distance*Math.sin(angle))}
let monolith=new Monolith(options);monolith.mesh.lookAt(new THREE.Vector3(0,options.position.y,0));monoliths.push(monolith);monolithMeshes.add(monolith.parent);angle+=step}
scene.add(monolithMeshes);mainMonolith=new Monolith();mainMonolith.mesh.scale.set(10,10,10);scene.add(mainMonolith.mesh);if(useOrbitControls){controls=new THREE.OrbitControls(camera,renderer.domElement);controls.enableKeys=!1;controls.enableDamping=!0;controls.dampingFactor=0.25;controls.update()}};function getClicked3DPoint(evt){evt.preventDefault();mouseClickPosition.x=(evt.clientX/canvas.width)*2-1;mouseClickPosition.y=-(evt.clientY/canvas.height)*2+1;rayCaster.setFromCamera(mouseClickPosition,camera);var intersects=rayCaster.intersectObjects(scene.children,!0);if(intersects.length>0){if(intersects[0].object.uuid===mainMonolith.mesh.uuid){meshesRotationTarget=0;meshesRotationTargetLocked=!0;TweenLite.to(mainMonolith.mesh.rotation,5,{z:mainMonolith.mesh.rotation.z-Math.PI,ease:Power4.easeInOut});setTimeout(()=>{for(let i=0,l=monoliths.length;i<l;i++){const monolith=monoliths[i];const currentNote={note:monolith.note};const targetNote=audioManager.getRandomFrequence();const duration=0.8;const delay=0.08*i;TweenLite.to(monolith.mesh.position,duration,{y:(targetNote-averageNote)/2,delay:delay,ease:Elastic.easeInOut.config(1)});TweenLite.to(currentNote,duration,{delay:delay,note:targetNote,ease:Elastic.easeInOut.config(1),onUpdate:()=>{audioManager.playNote(monolith.osc,currentNote.note,0.2)},onComplete:()=>{monolith.note=targetNote}})}},1000);setTimeout(()=>{meshesRotationTargetLocked=!1},5000)}else{for(let j=0,h=intersects.length;j<h;j++){let intersect=intersects[j];for(let i=0,l=monoliths.length;i<l;i++){const monolith=monoliths[i];if(monolith.mesh.uuid===intersect.object.uuid){const currentNote={note:monolith.note};const targetNote=audioManager.getRandomFrequence();TweenLite.to(monolith.mesh.position,1,{y:(targetNote-averageNote)/2,ease:Elastic.easeInOut.config(1)});TweenLite.to(currentNote,1,{note:targetNote,ease:Elastic.easeInOut.config(1),onUpdate:()=>{audioManager.playNote(monolith.osc,currentNote.note,0.2)},onComplete:()=>{monolith.note=targetNote}})}}}}}};document.addEventListener("DOMContentLoaded",()=>{audioManager=new AudioManager();audioManager.initAudio();init();initEvents();render()});function initEvents(){window.addEventListener('resize',(event)=>{screenWidth=window.innerWidth;screenHeight=window.innerHeight});canvas.addEventListener('click',(evt)=>{getClicked3DPoint(evt)});canvas.addEventListener('mousedown',(evt)=>{isClicking=!0;document.body.classList.add('grabbing');mouse.x=(event.clientX/screenWidth-.5)*2
mouse.y=(event.clientY/screenHeight-.5)*2
originalMousePosition={x:mouse.x,y:mouse.y,}
mouseOffset.x=0;mouseOffset.y=0});window.addEventListener('mousemove',function(event){mouse.x=(event.clientX/screenWidth-.5)*2
mouse.y=(event.clientY/screenHeight-.5)*2
cameraTargetPosition={x:10*zoomLevel*(Math.cos(4*mouse.x)),z:-10*zoomLevel*(Math.sin(4*mouse.x)),y:-700*mouse.y,}});canvas.addEventListener('mouseup',(evt)=>{isClicking=!1;document.body.classList.remove('grabbing');originalMousePosition={x:0,x:0,}
mouseOffset.x=0;mouseOffset.y=0});document.addEventListener('keydown',(evt)=>{if(evt.keyCode===38){meshesRotationTarget+=10}
if(evt.keyCode===40){meshesRotationTarget-=10}
if(evt.keyCode===32){renderer.autoClear=!renderer.autoClear}});document.addEventListener('mousewheel',(event)=>{if((zoomLevel>zoomMax&&event.deltaY>0)||(zoomLevel<-zoomMax&&event.deltaY<0)){return!1}
zoomLevel+=event.deltaY/4;cameraTargetPosition={x:10*zoomLevel*(Math.cos(4*mouse.x)),z:-10*zoomLevel*(Math.sin(4*mouse.x)),y:-700*mouse.y,}});let buttonAdd=document.querySelector('.button--add');let buttonRemove=document.querySelector('.button--remove');buttonAdd.addEventListener('click',(event)=>{let options={};let oscIndex=0;options.osc=audioManager.oscillators[Object.keys(audioManager.oscillators)[oscIndex]];options.note=audioManager.getRandomFrequence();let distance=(50+Math.random()*500);let angle=Math.random();options.distance=distance;options.angle=angle;let positionY=(options.note-averageNote)/2;options.position={x:0,y:1000,z:Math.max(80,distance*Math.sin(angle))}
let monolith=new Monolith(options);monolith.mesh.lookAt(new THREE.Vector3(0,options.position.y,0));monoliths.push(monolith);monolithMeshes.add(monolith.parent);TweenLite.to(monolith.mesh.position,1,{y:positionY,ease:Power4.easeOut,onUpdate:()=>{audioManager.playNote(monolith.osc,options.note-0.1*(positionY-monolith.mesh.position.y),0.2)},})});buttonRemove.addEventListener('click',(event)=>{let monolith=this.monoliths[0];if(monolith){this.monoliths.shift();TweenLite.to(monolith.mesh.position,1,{y:-1000,ease:Power1.easeIn,onComplete:()=>{monolith.parent.remove(monolith.mesh)
monolithMeshes.remove(monolith.parent)}})}})}
function render(){requestAnimationFrame(render);delta=clock.getDelta();updateGradient();for(let i=0;i<monoliths.length;i++){let monolith=monoliths[i];monolith.update(clock.elapsedTime,meshesRotation)}
if(!meshesRotationTargetLocked){meshesRotationTarget+=(1-meshesRotationTarget)*lerp}
meshesRotation+=(meshesRotationTarget-meshesRotation)*lerp2;if(!useOrbitControls){camera.position.x+=(cameraTargetPosition.x-camera.position.x)*lerp2;camera.position.y+=(cameraTargetPosition.y-camera.position.y)*lerp2;camera.position.z+=(cameraTargetPosition.z-camera.position.z)*lerp2}
camera.lookAt(scene.position);renderer.render(scene,camera)}